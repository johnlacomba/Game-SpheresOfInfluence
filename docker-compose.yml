version: "3.9"

services:
  backend:
    build:
      context: ./backend
    environment:
      PORT: ${PORT:-8080}
      GAME_WIDTH: ${GAME_WIDTH:-64}
      GAME_HEIGHT: ${GAME_HEIGHT:-64}
      GAME_RESOURCE_TILES: ${GAME_RESOURCE_TILES:-220}
      GAME_TICK_MS: ${GAME_TICK_MS:-1000}
      COGNITO_REGION: ${COGNITO_REGION}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID}
      COGNITO_APP_CLIENT_ID: ${COGNITO_APP_CLIENT_ID}
      ALLOW_INSECURE_AUTH: ${ALLOW_INSECURE_AUTH:-true}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN:-*}
    volumes:
      - backend_data:/app/data
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile.build-only
      args:
        NODE_ENV: production
        VITE_BACKEND_URL: ${VITE_BACKEND_URL:-https://localhost/api}
        VITE_COGNITO_REGION: ${VITE_COGNITO_REGION}
        VITE_COGNITO_USER_POOL_ID: ${VITE_COGNITO_USER_POOL_ID}
        VITE_COGNITO_APP_CLIENT_ID: ${VITE_COGNITO_APP_CLIENT_ID}
        VITE_DEBUG_PLAYER_ID: ${VITE_DEBUG_PLAYER_ID:-dev-player-1}
    volumes:
      - frontend_dist:/app/dist
    profiles:
      - build
    networks:
      - app-network

  frontend:
    image: nginx:1.27-alpine
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
      - ./certbot/logs:/var/log/letsencrypt
    environment:
      - EMAIL=${CERTBOT_EMAIL:-admin@example.com}
      - DOMAIN=${DOMAIN:-localhost}
    entrypoint: |
      sh -c '
        if [ "$$DOMAIN" != "localhost" ]; then
          echo "Obtaining certificate for $$DOMAIN";
          certbot certonly \
            --webroot \
            --webroot-path=/var/www/html \
            --email $$EMAIL \
            --agree-tos \
            --no-eff-email \
            --keep-until-expiring \
            --non-interactive \
            -d $$DOMAIN &&
          cp /etc/letsencrypt/live/$$DOMAIN/fullchain.pem /etc/letsencrypt/fullchain.pem &&
          cp /etc/letsencrypt/live/$$DOMAIN/privkey.pem /etc/letsencrypt/privkey.pem;
        else
          echo "Skipping certificate request for localhost.";
        fi'
    profiles:
      - ssl-setup
    networks:
      - app-network

  certbot-renew:
    image: certbot/certbot:latest
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
      - ./certbot/logs:/var/log/letsencrypt
    environment:
      - EMAIL=${CERTBOT_EMAIL:-admin@example.com}
      - DOMAIN=${DOMAIN:-localhost}
    entrypoint: |
      sh -c '
        echo "0 12 * * * certbot renew --quiet && echo \"Certificate renewed at \$$(date)\"" | crontab -
        crond -f'
    profiles:
      - ssl-renew
    networks:
      - app-network
    restart: unless-stopped

  cert-setup:
    image: alpine:3.19
    volumes:
      - ssl_certs:/ssl
      - ./copy-certs.sh:/copy-certs.sh:ro
    command: ["sh", "/copy-certs.sh"]
    profiles:
      - cert-setup
    networks:
      - app-network

volumes:
  frontend_dist:
  ssl_certs:
  backend_data:

networks:
  app-network:
    driver: bridge
